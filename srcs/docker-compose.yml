# Syntax: https://www.redhat.com/en/topics/automation/what-is-yaml#:~:text=YAML%20is%20a%20human%2Dreadable,is%20for%20data%2C%20not%20documents.
# Services: https://docs.docker.com/reference/compose-file/services/

# ------------------------------------
# DEFINE SERVICES
# ------------------------------------

services:
  # 1. MARIADB SERVICE (Database)
  mariadb:
    # Use 'inception' tag, as not to default to 'latest'.
    image: mariadb:inception

    build:
      # Automatically uses 'Dockerfile' in the specified context directory
      context: ${MARIADB_CONTEXT}

    restart: always

    # Vars within the container, used by init_db.sh when running it
    # Docker Compose automatically loads variables from .env file in the same directory
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_VOLUME: ${DB_VOLUME}

      # Vars pointing to secret file paths within the container (default location)
      DB_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      DB_USER_PASSWORD_FILE: /run/secrets/db_user_password

    volumes:
      - db_data:${DB_VOLUME}

    networks:
      - inception_network

    # Secrets are mounted as files in /run/secrets/<name>
    secrets:
      - db_root_password
      - db_user_password

    stop_grace_period: 1s

  # 2. WORDPRESS SERVICE (Web Server)
  wordpress:
    # Make sure WordPress waits for MariaDB before starting setup
    depends_on:
      - mariadb

    image: wordpress:inception

    build:
      context: ${WORDPRESS_CONTEXT}

    restart: always

    environment:
      DB_HOST: mariadb  # Service name acts as the hostname (DNS resolution)
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DOMAIN_NAME: ${DOMAIN_NAME}
      WP_TITLE: ${WP_TITLE}
      WP_ADMIN_USER: ${WP_ADMIN_USER}
      WP_ADMIN_EMAIL: ${WP_ADMIN_EMAIL}
      WP_USER: ${WP_USER}
      WP_USER_EMAIL: ${WP_USER_EMAIL}
      WP_USER_ROLE: ${WP_USER_ROLE}
      WP_VOLUME: ${WP_VOLUME}

      DB_USER_PASSWORD_FILE: /run/secrets/db_user_password
      WP_ADMIN_PASSWORD_FILE: /run/secrets/wp_admin_password
      WP_USER_PASSWORD_FILE: /run/secrets/wp_user_password

    volumes:
      - wp_data:${WP_VOLUME}

    networks:
      - inception_network

    secrets:
      - db_user_password
      - wp_admin_password
      - wp_user_password

  # 3. NGINX (Reverse Proxy)
  nginx:
    depends_on:
      - wordpress

    image: nginx:inception

    build:
      context: ${NGINX_CONTEXT}

    restart: always

    # Variables needed by the entrypoint script
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
      WP_VOLUME: ${WP_VOLUME}

      SSL_PRIV_KEY_FILE: /run/secrets/ssl_priv_key
      SSL_CERT_FILE: /run/secrets/ssl_pub_key

    # Expose 443 (for secure access)
    # HOST_PORT:CONTAINER_PORT --> explicitly map host ports as these are entry points to the application
    ports:
      - "443:443"

    # Mount WordPress volume so Nginx can access static files
    volumes:
      - wp_data:${WP_VOLUME}

    networks:
      - inception_network

    secrets:
      - ssl_pub_key
      - ssl_priv_key

# ------------------------------------
# DEFINE VOLUMES AND SECRETS
# ------------------------------------

volumes:
  # Per default, the driver is 'local' (stored on local Docker host filesystem)
  # and persistence is 'permanent' (data is kept until volume is explicitly removed)
  db_data:
    driver_opts:
      # This forces the volume data to be stored at the specified path on the VM host.
      type: none
      o: bind
      device: ${VOLUME_PATH}db_data
  wp_data:
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_PATH}wp_data

networks:
  # Per default, that's a 'bridge' network driver (internal and isolated) and 'local' scope (only accessible by containers on the same host)
  inception_network:

secrets:
  db_root_password:
    file: ${SECRET_DB_ROOT_PASS_FILE}

  db_user_password:
    file: ${SECRET_DB_USER_PASS_FILE}

  wp_admin_password:
    file: ${SECRET_WP_ADMIN_PASS_FILE}

  wp_user_password:
    file: ${SECRET_WP_USER_PASS_FILE}

  ssl_pub_key:
    file: ${SECRET_SSL_PUB_KEY_FILE}

  ssl_priv_key:
    file: ${SECRET_SSL_PRIV_KEY_FILE}
