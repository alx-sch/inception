# This configuration file is designed as a template (default.conf.template)
# for Nginx to operate as the front-end web server and reverse proxy for WordPress.
# It listens on port 443, ensuring all subsequent static file delivery and
# dynamic request forwarding to the separate PHP-FPM (wordpress) container are
# done securely using TLS/SSL.

server {
    # MAIN ENTRY POINT: Handle HTTPS traffic for WordPress site
    listen 443 ssl; # Listen on port 443 for SSL/TLS connections
    server_name aschenk.42.fr;

    # TLS/SSL configuration
    ssl_certificate /run/secrets/ssl_pub_key;
    ssl_certificate_key /run/secrets/ssl_priv_key;

    ssl_protocols TLSv1.2 TLSv1.3; # Nginx only accepts secure connections using these protocols

    # Encryption algorithms (ciphers) that Ngninx will (not) permit
    # - HIGH: Prioritizes strong encryption algorithms
    # - !aNULL: Disallows ciphers that do not provide authentication
    # - !MD5: Disallows ciphers that use the weak MD5 hashing algorithm
    ssl_ciphers HIGH:!aNULL:!MD5;

    root /var/www/html;  # Set the root directory for WordPress files

    # default file to serve if no specific file is requested (e.g. directory access)
    index index.php index.html index.htm;

    # # Forward requests starting with /redis-explorer/ to the dedicated PHP-FPM container.
    location /redis-explorer/ {
        # The root is where the PHP file resides inside the redis_explorer_fpm container
        root /var/www;

        # Rewrite the URL from /redis-explorer/... to the file /redis_explorer.php (regex); last flag: restart processing with new URI
        # the next location block (the one for redis_explorer.php) will handle the rewritten request
        rewrite ^/redis-explorer/(.*)$ /redis_explorer.php last;
    }

    # This block executes the specific file for the Redis Explorer.
    # Note the use of '=' for an exact URI match.
    location = /redis_explorer.php {
        # Forward execution to the dedicated Explorer FPM container
        fastcgi_pass redis-explorer:9000;
        
        fastcgi_index index.php;
        include fastcgi_params;
        
        # SCRIPT_FILENAME path must match where the file was copied in the Explorer Dockerfile
        fastcgi_param SCRIPT_FILENAME /var/www/redis_explorer.php; 
        
        # Prevents the request from continuing after execution
        break; 
    }

    # Handle permalinks and static files
    # $uri is Uniform Resource Identifier:
    # Example Request: http://example.com/sample-page/page.php?id=123
    # $uri: /sample-page/page.php
    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    # Pass all PHP requests to the WordPress (PHP-FPM) container
    location ~ \.php$ { # Interpret all files ending with .php
        # 'wordpress' is the service name, and '9000' is the exposed port from the wordpress service
        fastcgi_pass wordpress:9000; # Forward PHP script execution to the WordPress container
        fastcgi_index index.php; # Simplifies path resolution (http://example.com vs http://example.com/); if a directory is requested, it 'index.php' will resolve it
        include fastcgi_params; # tells Nginx to include the standard FastCGI parameters
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; # Tells PHP-FPM the path of the script file to execute: $document_root is as defined by 'root ${WP_VOLUME};'; $fastcgi_script_name is the URI of the request
        fastcgi_param PATH_INFO $fastcgi_path_info; # Provides additional path information (after $uri) for PHP scripts
    }

    # Deny access to .htaccess files (which may contain sensitive information)
    location ~ /\.ht {
        deny all;
    }
}
